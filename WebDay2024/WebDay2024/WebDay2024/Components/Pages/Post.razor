@page "/post"

<PageTitle>Post</PageTitle>

<h1>Welcome to Web day 2024!</h1>

<article>
    <p>Il web è in costante evoluzione. Siamo passati da siti web in HTML ad applicazioni più complesse che utilizzavano tecnologie di rendering Server-Side (PHP, ASP.NET MVC e molte altre) fino ad arrivare a Single-Page applications dove il frontend e il backend sono due strutture totalmente indipendenti e che comunicano tra di loro, il più delle volte, attraverso API RESTful.</p>
    <p>Negli ultimi anni c’è stato un un ritorno al Server-Side Rendering, soprattutto nel mondo Javascript, con tecnologie come Next.js.</p>
    <p>Con .NET 8 anche Blazor ha voluto dire la sua introducendo un nuovo hosting model che offre funzionalità di SSR unite a modalità interattive che utilizzano Blazor Server e/o Blazor WebAssembly.</p>
    <p>In questa sessione proviamo a fare un viaggio in Blazor e .NET 8 per capire quali sono, secondo me, i punti di forza e i vantaggi che valgono “il prezzo del biglietto”.</p>
</article>
<hr />

<div class="row">
    <form @onsubmit="AddComment" @formname="commentForm" method="post">
        <AntiforgeryToken />

        <div class="mb-2">
            <label>Author</label>
            <InputText @bind-Value="Comment.Author" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Comment</label>
            <InputTextArea @bind-Value="Comment.Comment" class="form-control" />
        </div>
        <div class="mb-2">
            <button type="submit" class="btn btn-primary">Submit!</button>
        </div>
    </form>
</div>

@if (comments.Any())
{
    <div class="row">
        @foreach (var item in comments)
        {
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        @item.Author
                    </div>
                    <div class="card-body">
                        <p class="card-text">@item.Comment</p>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    //[SupplyParameterFromForm]
    public CommentViewModel Comment { get; set; } = new();

    private List<CommentViewModel> comments = [];

    private void AddComment()
    {
        try
        {
            comments.Add(Comment);
        }
        finally
        {
            Comment = new();
        }
    }

    public class CommentViewModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string Author { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required]
        public string Comment { get; set; } = string.Empty;
    }
}
